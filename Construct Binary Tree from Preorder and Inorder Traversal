// problem Link: https://leetcode.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/?envType=study-plan-v2&envId=top-interview-150

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector <int> pre, in;
    int idx = -1;
    unordered_map<int, int> index;
    TreeNode* dfs(TreeNode* root, int l, int r) {
        if (l > r) return NULL;
        root = new TreeNode();
        root->val = pre[++idx];
        int middle = index[pre[idx]];
        root->left = dfs(root->left, l, middle-1);
        root->right = dfs(root->right, middle+1, r);
        return root;
    }
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        pre = preorder, in = inorder;
        for (int i=0;i<inorder.size();++i) {
            index[inorder[i]] = i;
        }
        TreeNode* root;
        return dfs(root, 0, in.size()-1);
    }
};
