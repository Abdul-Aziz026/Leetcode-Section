// Problem Link: https://leetcode.com/problems/symmetric-tree/?envType=study-plan-v2&envId=top-interview-150
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * }
 */
class Solution {
public:
    bool dfs(TreeNode* a, TreeNode* b) {
        if (a==NULL && b==NULL) return true;
        if (a==NULL or b==NULL) return false;
        if (a->val != b->val) return false;
        bool symmeTree = true;
        // if (a->right==NULL && b->left or a->right && b->left==NULL) return false;
        // if (b->right==NULL && a->left or b->right && a->left==NULL) return false;
        symmeTree = dfs(a->right, b->left);
        symmeTree &= dfs(a->left, b->right);
        return symmeTree;
    }
    
    bool isSymmetric(TreeNode* root) {
        if (root==NULL) return true;
        return dfs(root->left, root->right);
    }
};
